-- 1 ------------------------------
SELECT
  PRODUCT.NAME,
  PRICE,
  nvl(TARE.NAME, 'unknown')         AS TARE,
  nvl(PRODUCT_TYPE.NAME, 'unknown') AS TYPE
FROM PRODUCT
  LEFT OUTER JOIN TARE
    ON PRODUCT.TARE_ID = TARE.ID
  LEFT JOIN PRODUCT_TYPE
    ON PRODUCT.PRODUCT_TYPE_ID = PRODUCT_TYPE.ID;
-- --------------------------------

-- 2 ------------------------------
SELECT *
FROM PRODUCT;

SELECT
  max(PRICE) AS MAX,
  avg(PRICE) AS AVG,
  min(PRICE) AS MIN
FROM PRODUCT;
-- --------------------------------

-- 3 ------------------------------
SELECT PRODUCT_TYPE.NAME AS PRODUCT_TYPE_NAME
FROM PRODUCT_TYPE
  INNER JOIN PRODUCT
    ON PRODUCT_TYPE.ID = PRODUCT.PRODUCT_TYPE_ID
GROUP BY PRODUCT_TYPE.NAME;
-- --------------------------------

-- 4 ------------------------------
SELECT NAME AS PRODUCT_NAME_OF_TOP_3
FROM
  (
    SELECT
      PRODUCT.NAME,
      count(PRODUCT.NAME)
    FROM SELLING
      INNER JOIN PRODUCT
        ON SELLING.PRODUCT_ID = PRODUCT.ID
    WHERE SELE_DATE BETWEEN add_months(sysdate, -1) AND sysdate
    GROUP BY PRODUCT.NAME
    ORDER BY count(PRODUCT.NAME) DESC
  )
WHERE ROWNUM <= 3;
-- --------------------------------

-- 5 ------------------------------
SELECT
  PRODUCT_TYPE.NAME,
  count(PRODUCT.NAME) AS COUNT
FROM PRODUCT_TYPE
  INNER JOIN PRODUCT
    ON PRODUCT_TYPE.ID = PRODUCT.PRODUCT_TYPE_ID
GROUP BY PRODUCT_TYPE.NAME;
-- --------------------------------

-- 6 ------------------------------
SELECT
  nvl(PRODUCT_TYPE.NAME, 'All Types')                                AS PRODUCT_TYPE_NAME,
  nvl((SELLER.FIRST_NAME || ' ' || SELLER.LAST_NAME), 'All Sellers') AS SELLER_NAME,
  sum(SELLING.PRICE * SELLING.QUANTITY)                              AS AMOUNT
FROM PRODUCT_TYPE
  INNER JOIN PRODUCT
    ON PRODUCT_TYPE.ID = PRODUCT.PRODUCT_TYPE_ID
  INNER JOIN SELLING
    ON PRODUCT.ID = SELLING.PRODUCT_ID
  INNER JOIN SELLER
    ON SELLING.SELLER_ID = SELLER.ID
WHERE SELLING.SELE_DATE BETWEEN add_months(sysdate, -1) AND sysdate
GROUP BY ROLLUP (PRODUCT_TYPE.NAME, (SELLER.FIRST_NAME || ' ' || SELLER.LAST_NAME))
ORDER BY PRODUCT_TYPE.NAME, (SELLER.FIRST_NAME || ' ' || SELLER.LAST_NAME);
-- --------------------------------

-- 7 ------------------------------
SELECT
  nvl(PRODUCT_TYPE.NAME, 'All Types')                                AS PRODUCT_TYPE_NAME,
  nvl((SELLER.FIRST_NAME || ' ' || SELLER.LAST_NAME), 'All Sellers') AS SELLER_NAME,
  sum(SELLING.PRICE * SELLING.QUANTITY)                              AS AMOUNT
FROM PRODUCT_TYPE
  INNER JOIN PRODUCT
    ON PRODUCT_TYPE.ID = PRODUCT.PRODUCT_TYPE_ID
  INNER JOIN SELLING
    ON PRODUCT.ID = SELLING.PRODUCT_ID
  INNER JOIN SELLER
    ON SELLING.SELLER_ID = SELLER.ID
WHERE SELLING.SELE_DATE BETWEEN add_months(sysdate, -1) AND sysdate
GROUP BY CUBE (PRODUCT_TYPE.NAME, (SELLER.FIRST_NAME || ' ' || SELLER.LAST_NAME))
ORDER BY PRODUCT_TYPE.NAME, (SELLER.FIRST_NAME || ' ' || SELLER.LAST_NAME);
-- --------------------------------

-- 8 ------------------------------
ALTER TABLE SELLER
  ADD SUBORDINATE NUMBER;
ALTER TABLE SELLER
  ADD CONSTRAINT subordinate_id_fk FOREIGN KEY (SUBORDINATE)
REFERENCES SELLER (ID);

UPDATE SELLER SET SUBORDINATE = 2 WHERE ID = 1;
UPDATE SELLER SET SUBORDINATE = 5 WHERE ID = 2;
UPDATE SELLER SET SUBORDINATE = 8 WHERE ID = 3;
UPDATE SELLER SET SUBORDINATE = 8 WHERE ID = 7;
UPDATE SELLER SET SUBORDINATE = 5 WHERE ID = 8;

SELECT SELLER_ID, SELLER_NAME FROM
(
  SELECT
    LEVEL,
    SELLER.ID AS SELLER_ID,
    LPAD(' ', (LEVEL - 1)) || FIRST_NAME || ' ' || LAST_NAME AS SELLER_NAME
  FROM SELLER
  WHERE DISMISSAL_DATE IS NULL
  START WITH SUBORDINATE IS NULL
  CONNECT BY PRIOR ID = SUBORDINATE
)
-- --------------------------------